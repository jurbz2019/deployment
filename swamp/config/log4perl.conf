#
# Log4perl configuration
#

# ALL level general messages sent to Logfile
# ERROR and FATAL level messages added to ErrorLogfile
log4perl.logger            = ALL, Logfile, ErrorLogfile

# TRACE level runtime trace messages sent to RTLogfile
log4perl.category.runtrace = TRACE, RTLogfile
log4perl.additivity.runtrace = 0

# TRACE level timing statistics messages sent to TimeLogfile
log4perl.category.timetrace = TRACE, TimeLogfile
log4perl.additivity.timetrace = 0

# error and fatal messages appender and layout
log4perl.appender.ErrorLogfile = Log::Log4perl::Appender::File
log4perl.appender.ErrorLogfile.umask    = sub { 0000 };
log4perl.appender.ErrorLogfile.filename = /opt/swamp/log/fatalerrors.log
log4perl.appender.ErrorLogfile.syswrite = 1
log4perl.appender.ErrorLogfile.mode     = append
log4perl.appender.ErrorLogfile.layout   = Log::Log4perl::Layout::PatternLayout
log4perl.appender.ErrorLogfile.layout.ConversionPattern = %d [%p %P]: %F{1}-%L %m%n[%T]%n%n
log4perl.appender.ErrorLogfile.Threshold = ERROR

# general messages appender and layout
log4perl.appender.Logfile          = Log::Log4perl::Appender::File
log4perl.appender.Logfile.umask    = sub { 0000 };
# general log file
log4perl.appender.Logfile.filename = sub { logfilename(); };
log4perl.appender.Logfile.syswrite = 1
log4perl.appender.Logfile.mode     = append
log4perl.appender.Logfile.layout   = Log::Log4perl::Layout::PatternLayout
# generic - date, pid, file, line, chomp nl nl
# log4perl.appender.Logfile.layout.ConversionPattern = %d [%P]: %F{1}-%L %m%n%n
# add %p - event priority
# log4perl.appender.Logfile.layout.ConversionPattern = %d [%p %P]: %F{1}-%L %m%n%n
# add %T - stack trace
# log4perl.appender.Logfile.layout.ConversionPattern = %d [%P]: %F{1}-%L %m%n[%T]%n%n
# add %p %T
log4perl.appender.Logfile.layout.ConversionPattern = %d [%p %P]: %F{1}-%L %m%n[%T]%n%n

# runtime trace messages appender and layout
log4perl.appender.RTLogfile          = Log::Log4perl::Appender::File
log4perl.appender.RTLogfile.umask    = sub { 0000 };
# general log file
# log4perl.appender.RTLogfile.filename = sub { logfilename(); };
# runtrace specific log file
log4perl.appender.RTLogfile.filename = /opt/swamp/log/runtrace.log
log4perl.appender.RTLogfile.syswrite = 1
log4perl.appender.RTLogfile.mode     = append
log4perl.appender.RTLogfile.layout   = Log::Log4perl::Layout::PatternLayout
# generic - date, hours:minutes:seconds,milliseconds, pid, file, line, chomp nl nl
# log4perl.appender.RTLogfile.layout.ConversionPattern = %d{HH:mm:ss,SSS} [%P]: %F{1}-%L %m%n%n
# add %p - event priority
# log4perl.appender.RTLogfile.layout.ConversionPattern = %d{HH:mm:ss,SSS} [%p %P]: %F{1}-%L %m%n%n
# add %T - stack trace
# log4perl.appender.RTLogfile.layout.ConversionPattern = %d{HH:mm:ss,SSS} [%P]: %F{1}-%L %m%n[%T]%n%n
# add %p %T
log4perl.appender.RTLogfile.layout.ConversionPattern = %d{HH:mm:ss,SSS} [%p %P]: %F{1}-%L %m%n[%T]%n%n

# timing statistics messages appender and layout
log4perl.appender.TimeLogfile          = Log::Log4perl::Appender::File
log4perl.appender.TimeLogfile.umask    = sub { 0000 };
# general log file
# log4perl.appender.TimeLogfile.filename = sub { logfilename(); };
# timetrace specific log file
log4perl.appender.TimeLogfile.filename = /opt/swamp/log/timetrace.log
log4perl.appender.TimeLogfile.syswrite = 1
log4perl.appender.TimeLogfile.mode     = append
log4perl.appender.TimeLogfile.layout   = Log::Log4perl::Layout::PatternLayout
# for parsing - message only
log4perl.appender.TimeLogfile.layout.ConversionPattern = %H %m%n
# generic - date, hours:minutes:seconds,milliseconds, pid, file, line, chomp nl nl
# log4perl.appender.TimeLogfile.layout.ConversionPattern = %d{HH:mm:ss,SSS} [%P]: %F{1}-%L %m%n
# add %p - event priority
# log4perl.appender.TimeLogfile.layout.ConversionPattern = %d{HH:mm:ss,SSS} [%p %P]: %F{1}-%L %m%n
# add %T - stack trace
# log4perl.appender.TimeLogfile.layout.ConversionPattern = %d{HH:mm:ss,SSS} [%P]: %F{1}-%L %m%n[%T]%n
# add %p %T
# log4perl.appender.TimeLogfile.layout.ConversionPattern = %d{HH:mm:ss,SSS} [%p %P]: %F{1}-%L %m%n[%T]%n

# example use of timetrace appender in perl code
# use Time::HiRes qw(time);
# my $event_start = time();
# Log::Log4perl->get_logger('timetrace')->trace("$execrunuid <event_name> start: $event_start");
# ... execute event code
# Log::Log4perl->get_logger('timetrace')->trace("$execrunuid <event_name> elapsed: ", time() - $event_start);
