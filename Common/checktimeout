# This file is subject to the terms and conditions defined in
# 'LICENSE.txt', which is part of this source code distribution.
#
# Copyright 2012-2020 Software Assurance Marketplace

# allow at most one instance of checktimeout to run
# checktimeout can run indefinitely if it enters
# the checking for connected users loop
if ! mkdir /var/lock/checktimeoutlockdir
then
	exit
fi

# Bootstrap the environment by testing location of run-params.sh
# vm universe has /mnt/in
# docker universe has _$_CONDOR_SCRATCH_DIR
if [ -r "/mnt/in/run-params.sh" ]
then
	source /mnt/in/run-params.sh
	DELAY_SHUTDOWN_CMD=who
else
	source $_CONDOR_SCRATCH_DIR/run-params.sh
	DELAY_SHUTDOWN_CMD="ps a --no-headers -o ppid,pid,user,tname,state,command | egrep '^ *0 '"
fi

# if the web application has been running for at least CHECKTIMEOUT_DURATION seconds
# and there has been no tomcat activity for CHECKTIMEOUT_LASTLOG seconds then shutdown
read runtime lastlog <<< $(/usr/local/libexec/checktimeout.pl $VIEWER $TOMCAT_LOG_DIR $CHECKTIMEOUT_LASTLOG)
if [[ $runtime -gt $CHECKTIMEOUT_DURATION && $lastlog -gt $CHECKTIMEOUT_LASTLOG ]] 
then
	echo "`date +"%Y/%m/%d %H:%M:%S"`: [$$] runtime: $runtime [$CHECKTIMEOUT_DURATION] lastlog: $lastlog [$CHECKTIMEOUT_LASTLOG]" >> $SWAMP_LOG_FILE 2>&1

	echo "`date +"%Y/%m/%d %H:%M:%S"`: [$$] Checking for connected users" >> $SWAMP_LOG_FILE 2>&1
	echo "CONNECTEDUSERS" > $SWAMP_EVENT_FILE
	connected_users=$(eval "$DELAY_SHUTDOWN_CMD" 2>&1)
	while [ "$connected_users" != "" ]
	do
		echo "`date +"%Y/%m/%d %H:%M:%S"`: [$$] $connected_users" >> $SWAMP_LOG_FILE 2>&1
        echo "$connected_users" > $SWAMP_EVENT_FILE
        sleep 30
		connected_users=$(eval "$DELAY_SHUTDOWN_CMD" 2>&1)
	done

	echo "`date +"%Y/%m/%d %H:%M:%S"`: [$$] Shutting down $VIEWER viewer via checktimeout" >> $SWAMP_LOG_FILE 2>&1
	echo "MACHINE_SHUTDOWN_COMMAND: $MACHINE_SHUTDOWN_COMMAND" >> $SWAMP_LOG_FILE 2>&1
	echo "TIMERSHUTDOWN" > $SWAMP_EVENT_FILE
	$($MACHINE_SHUTDOWN_COMMAND)
fi
rmdir /var/lock/checktimeoutlockdir
