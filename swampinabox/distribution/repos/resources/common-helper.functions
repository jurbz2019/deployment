#!/bin/bash

# This file is subject to the terms and conditions defined in
# 'LICENSE.txt', which is part of this source code distribution.
#
# Copyright 2012-2019 Software Assurance Marketplace

exit_with_error() {
    echo
    echo "Error: Setup is not complete" 1>&2
    exit 1
}

#
# Install RPMs using 'yum'.
#
yum_install() {
    echo "Installing: $*"
    yum -y install "$@"
}

#
# Check whether there are RPMs providing the given list of resources.
#
yum_confirm() {
    local not_installed=()
    for pkg in "$@" ; do
        printf 'Checking for %s ... ' "$pkg"
        if ! rpm -q --whatprovides "$pkg" 2>&1 ; then
            not_installed+=("$pkg")
        fi
    done
    if [ ${#not_installed[@]} -gt 0 ]; then
        echo
        echo "Error: No packages provide: ${not_installed[*]}" 1>&2
        return 1
    fi
    return 0
}

#
# Write to standard out this host's Linux distribution.
#
get_os_distribution() {
    if [ -r /etc/centos-release ]; then
        echo "CentOS Linux"
        return 0
    fi
    if [ -r /etc/redhat-release ]; then
        echo "Red Hat Linux"
        return 0
    fi
    echo "Unknown"
    return 1
}

#
# Write to standard out this host's OS's major version.
#
get_os_version() {
    if [ -r /etc/centos-release ]; then
        awk '{ print substr($0, match($0, /[[:digit:]]+/), RLENGTH) ; }' \
            /etc/centos-release
        return 0
    fi
    if [ -r /etc/redhat-release ]; then
        awk '{ print substr($0, match($0, /[[:digit:]]+/), RLENGTH) ; }' \
            /etc/redhat-release
        return 0
    fi
    echo "Unknown"
    return 1
}

#
# Check whether this host is running a supported OS.
#
check_os_dist_and_ver() {
    if [ "$SWAMP_CHECK_OS_DIST_AND_VER" = "completed" ]; then
        return 0
    fi

    local distribution
    local version

    distribution=$(get_os_distribution)
    version=$(get_os_version)

    echo "Checking OS support ... $distribution $version"

    case "$distribution $version" in
        "CentOS Linux 6") ;;
        "CentOS Linux 7") ;;
        "Red Hat Linux 6") ;;
        "Red Hat Linux 7") ;;
        *)
            echo
            echo "Warning: This set up script might not work for $distribution $version."
            printf 'Continue anyway? [N/y] '
            read -r answer
            printf '\n'
            if [ "$answer" != "y" ]; then
                return 1
            fi
            ;;
    esac

    export SWAMP_CHECK_OS_DIST_AND_VER=completed
    return 0
}

#
# Check whether this host's OS is in need of significant updates.
#
check_os_dist_upgrade() {
    if [ "$SWAMP_OS_DIST_UPGRADE" = "completed" ]; then
        return 0
    fi

    for release_pkg in centos-release redhat-release-server ; do
        if rpm -q --whatprovides "$release_pkg" 1>/dev/null 2>&1 ; then
            echo "Running 'yum makecache' ..."
            yum makecache

            echo "Running 'yum check-update $release_pkg' ..."
            yum check-update "$release_pkg"
            local ok=$?

            if [ $ok -eq 100 ]; then
                echo
                cat <<EOF
Warning: The '$release_pkg' package is out of date.

This probably means that significant updates are available for this host.
Running this setup script might cause inconsistent versions of packages to
be installed that yum/rpm will not warn about.

Consider running 'yum update' first, before continuing with this script.
EOF
                printf 'Continue anyway? [N/y] '
                read -r answer
                printf '\n'
                if [ "$answer" != "y" ]; then
                    return 1
                fi
            elif [ $ok -ne 0 ]; then
                echo
                echo "Error: Failed to run 'yum check-update $release_pkg'" 1>&2
                echo "Perhaps check that yum's repositories are configured correctly." 1>&2
                return 1
            fi
        fi
    done

    export SWAMP_OS_DIST_UPGRADE=completed
    return 0
}

#
# Check whether essential commands are in the current user's $PATH.
#
check_user() {
    if [ "$(whoami)" != "root" ]; then
        echo "Error: This set up script must be run as 'root'. Perhaps use 'sudo'." 1>&2
        return 1
    fi
    for cmd in cp rpm yum ; do
        printf 'Checking for %s ... ' "$cmd"
        if ! command -v "$cmd" 2>&1 ; then
            echo    # write a newline because 'command' printed nothing
            echo
            echo "Error: '$cmd' is not in $USER's \$PATH" 1>&2
            return 1
        fi
    done
    return 0
}
