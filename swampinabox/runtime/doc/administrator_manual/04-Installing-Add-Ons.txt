Installing Additional Components
--------------------------------


[[add-on-platforms]]
Installing Assessment Platforms
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In order to upload a package to your SWAMP and assess it, the SWAMP must
have a compatible assessment platform installed. For each package type that
the SWAMP supports, one or more platforms are available to be downloaded and
installed as part of your SWAMP-in-a-Box:

* Java, Python, Ruby, Web Scripting, and .NET: Ubuntu 16.04.

* C/C++: Recent releases of CentOS, Debian, Fedora, Scientific Linux,
  and Ubuntu.

* Android Java source: A version of the Ubuntu
  platform that includes the necessary dependencies for building packages.

[NOTE]
Most of the platforms will consume no more than approximately 20 GB of disk
space each when installed. The exceptions are the Android Ubuntu platforms.
The Docker-based Android Ubuntu platform will consume approximately 310 GB
of disk space; the virtual machine-based version will consume approximately
150 GB of disk space.

[NOTE]
If you add both the Docker and Virtual Machine platforms corresponding to
the same platform version, SWAMP-in-a-Box will use the Virtual Machine
platform for assessments. If you wish to configure SWAMP-in-a-Box to instead
give preference to Docker platforms, edit `/opt/swamp/etc/swamp.conf` (you
will need `root` access or `sudo` to edit this file) and change the value
for `preferred_platform_type` from `VM` to `DC`.


==== Before You Begin ====

* You will need `root` access to the SWAMP-in-a-Box host.

* You will need `root` access to the SWAMP-in-a-Box database.

* You will need to know whether the SWAMP-in-a-Box will run assessments
  using Docker or virtual machines (VMs).


==== Procedure ====

1. Visit https://platform.swampinabox.org/platform-images/.

2. Download and copy to the SWAMP-in-a-Box host the files corresponding to
   the platforms you wish to perform assessments on. Docker-based platforms
   are named as follows:

+
----
condor-[Linux distribution]-[version]-[64 bit]-master-[date]_docker.tar.xz
----

+
Virtual machine-based platforms are named as follows:

+
----
condor-[Linux distribution]-[version]-[32 or 64 bit]-master-[date].qcow2.gz
----

+
When downloading the files, name the copies exactly as shown on
https://platform.swampinabox.org/platform-images/[platform.swampinabox.org].
Otherwise, they will not be recognized as supported platforms in the next
step.

3. On the SWAMP-in-a-Box host, as `root` (or using `sudo`),
run the `install_platform` script, providing the paths to the platform files:

+
----
/opt/swamp/bin/install_platform <platform 1> <platform 2>...
----

+
When prompted, provide the password for the database's `root` user, which is
needed to add the platform to the database and make it available in the
SWAMP. Note that `install_platform` will likely take several minutes to
complete due to the sizes of the files (possibly several hours, in the case of
the Android Ubuntu platform).

4. (Optional) In order to conserve disk space, delete the platform files
that you downloaded and copied to the SWAMP-in-a-Box host.


Installing Additional Tools
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The SWAMP-in-a-Box installer includes and installs a variety of tools for
assessing packages.

For C/C++ packages, three additional tools can be installed:

  * <<about-codesonar,CodeSonar>>, and
  * <<about-parasoft,Parasoft C/C++test>>.

For Java packages, one additional tool can be installed:

  * <<about-parasoft,Parasoft Jtest>>.

For Web Scripting packages, one additional tool can be installed:

  * A version of https://retirejs.github.io/[Retire.js] that does not
    require internet access (the version included with SWAMP-in-a-Box will
    not function correctly without internet access).

The process for obtaining tool installers/archives from their vendors and
packaging them into the format that the SWAMP requires differs
_significantly_ between the tools. However, once that is done, the process
for installing and configuring the tools for use in the SWAMP is largely
similar.


==== Before You Begin ====

* You will need `root` access to the SWAMP-in-a-Box host.
* You will need `root` access to the SWAMP-in-a-Box database.


==== Obtain the Tool Installer/Archive from Its Vendor ====

CodeSonar::
Parasoft C/C++test::
Parasoft Jtest::

Refer to the <<obtaining-add-ons,appendix on obtaining add ons>> for
information on how to contact each tool's vendor. Obtain one or both of the
32-bit and 64-bit Linux archives for the tool you wish to install. For
Parasoft C/C++test and Parasoft Jtest, only versions 10.3.0 and later are
supported.

+
In addition, follow the vendor's instructions on setting up a license
server. Ensure that the SWAMP-in-a-Box host is able to contact the license
server on the required ports.

+
The archives for CodeSonar should be named:

+
----
codesonar-<version>.<YYYYMMDD>-i686-pc-linux.tar.gz    (32-bit)
codesonar-<version>.<YYYYMMDD>-x86_64-pc-linux.tar.gz  (64-bit)
----

+
The archives for Parasoft C/C++test should be named:

+
----
parasoft_cpptest_engine_<version>_linux.tar.gz         (32-bit)
parasoft_cpptest_engine_<version>_linux_x86_64.tar.gz  (64-bit)
----

+
The archives for Parasoft Jtest should be named:

+
----
parasoft_jtest_<version>_linux_x86.tar.gz     (32-bit)
parasoft_jtest_<version>_linux_x86_64.tar.gz  (64-bit)
----

Retire.js::

On the SWAMP-in-a-Box host, copy the
`/swamp/store/SCATools/bundled/retire-js-<version>.tar.gz` file
corresponding to the version of Retire.js that you would like to install
to some directory that you have write access to (for example, your home
directory).


[[add-on-tool-create-archive]]
==== Create the SWAMP Tool Archive ====

CodeSonar::
Parasoft C/C++test::
Parasoft Jtest::

Run the `make_swamp_tool` script to package the vendor's installers into the
archive format that the SWAMP uses.

+
----
/opt/swamp/bin/make_swamp_tool \
    --tool-name <gt-csonar or ps-ctest or ps-jtest> \
    --tool-version <version> \
    --installer-linux32 <path to 32-bit archive> \
    --installer-linux64 <path to 64-bit archive>
----

+
Specify `gt-csonar`, `ps-ctest`, or `ps-jtest` for the `--tool-name` option,
depending on the tool being packaged. Omit the `--installer-linux32` option
if you have only the 64-bit installer, and similarly for the
`--installer-linux64` option.

+
When `make_swamp_tool` completes, the output should include the path to the
SWAMP tool archive file that was created. Note that `make_swamp_tool` will
likely take several minutes to complete due to the size of the installers.

Retire.js::

Expand the archive file that you downloaded or copied:

+
----
tar zxvf <tool-name-and-version>.tar.gz
----

+
This should create a directory `<tool-name-and-version>`. Inside the
directory will be `README` files in various formats. Follow the directions
in the `README` for creating the SWAMP tool archive. Make note of whether
you will need to <<add-on-tool-configure,add additional entries to
`services.conf`>> or <<configure-internetless,configure assessments to run
without internet access>> (i.e., "internet-inaccessible" assessments).


==== Install the Tool ====

The `install_tool` script is used to install and manage any tools that are
added onto a SWAMP-in-a-Box installation. The script must always be invoked
with the following command line arguments:

* `--tool <id>`: This specifies the tool being managed. Recognized values
  for `<id>` include:

  ** `gt-csonar`: GrammaTech CodeSonar
  ** `ps-ctest`: Parasoft C/C++test
  ** `ps-jtest`: Parasoft Jtest
  ** `retire-js`: Retire.js

* `--add`, `--configure`, `--remove`, or `--replace`: This determines the
  "mode" that the script will run in, i.e., whether to add a new version of
  the tool, remove an existing version of the tool, replace an existing
  version of the tool, or configure the tool. Depending on the mode
  selected, other command line arguments will be required.

To add a new version of a tool to the swamp, as `root` (or using `sudo`),
run `install_tool` as follows:

----
/opt/swamp/bin/install_tool \
    --tool <id> \
    --add \
    --tool-version <version> \
    --tool-archive <path to the SWAMP tool archive file>
----

For some tools, notably Parasoft C/C++test and Parasoft Jtest, you might
need to pass a different version string to `install_tool` than the one for
`make_swamp_tool` in order to match the filename produced by
`make_swamp_tool`. For example, compared to the version string for
`make_swamp_tool`, you might need to append `-2` or `-12`.

Note that `install_tool` will likely take several minutes to complete due to
the size of the tool archive.


[[add-on-tool-configure]]
==== Configure the Tool ====

As `root` (or using `sudo`), run the `install_tool` script with the
`--configure` option, providing additional options as needed.

CodeSonar::
Parasoft C/C++test::
Parasoft Jtest::

Use the `--license-server-host` and `--license-server-port` options to
specify the hostname of the license server to use and the port on which to
contact the license server:

+
----
/opt/swamp/bin/install_tool \
    --tool <id> \
    --configure \
    --license-server-host <hostname of the license server> \
    --license-server-port <port number>
----

+
For Parasoft C/C++test and Parasoft Jtest, the script will prompt for the
username and password to use for contacting the license server.

+
In addition, use the `--limit` option to specify how many simultaneous
instances of the tool the SWAMP may run:

+
----
/opt/swamp/bin/install_tool \
    --tool <id> \
    --configure \
    --limit <max number of simultaneous instances>
----


==== Manage the Installed Versions of the Tool ====

* Additional versions of each tool can be installed using the directions
  above. In the SWAMP web application, the "latest" version of the tool will
  be whichever version was *installed* most recently. We recommend
  installing multiple versions in order (e.g., 1.0, 2.0, 2.1, 3.0, etc.) so
  that the "latest" version matches users' expectations.

* If you wish to remove a version of a tool from the SWAMP, as `root` (or
  using `sudo`), run the `install_tool` script with the `--remove` option,
  providing the version to remove:

+
----
/opt/swamp/bin/install_tool \
    --tool <id> \
    --remove \
    --tool-version <version>
----

* If you have previously installed, say, only the 32-bit version of a tool
  and now wish to make both the 32-bit and 64-bit versions available, first
  <<add-on-tool-create-archive,create the SWAMP tool archive>>, as above, to
  package the 32-bit and 64-bit archives together for the SWAMP. Then as
  `root` (or using `sudo`), run the `install_tool` script with the
  `--replace` option:

+
----
/opt/swamp/bin/install_tool \
    --tool <id> \
    --replace \
    --tool-version <version> \
    --tool-archive <path to SWAMP tool archive file>
----


[[add-on-viewers]]
Installing Additional Viewers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The SWAMP-in-a-Box installer includes and installs only a "native" viewer
for viewing the results of an assessment. The SWAMP web application also
provides a link to download the raw results of an assessment as a SCARF XML
file.

For users with needs that are not met by either of these options, it is
possible to install a SWAMP-specific version of Code Dx for viewing results.
Refer to the <<about-code-dx,appendix on Code Dx>> for information about
obtaining this SWAMP-specific version of Code Dx from Code Dx, Inc.
(SWAMP-in-a-Box currently does *not* support integrating with an existing,
standalone Code Dx installation.)


==== Before You Begin ====

* You will need a SWAMP-in-a-Box capable of running virtual machines.

* You will need `root` access to the SWAMP-in-a-Box host.

* You will need `root` access to the SWAMP-in-a-Box database.

* You will need to obtain the `.war` file for the SWAMP-specific version of
  Code Dx from Code Dx, Inc. If you are provided with a `.zip` file or some
  other archive format, first expand the archive and locate the `.war` file
  within the expanded contents.


==== Procedure ====

1. Visit https://platform.swampinabox.org/platform-images/.

2. Download and copy to the SWAMP-in-a-Box the viewer platform corresponding
   to the version of Code Dx that you wish to install. The platforms are
   named as follows:

+
----
condor-codedx-[version]-viewer-master-[date].qcow2.gz
----

3. Copy the Code Dx `.war` file obtained from Code Dx, Inc. to the
SWAMP-in-a-Box host.

4. On the SWAMP-in-a-Box host, as `root` (or using `sudo`), run the
`install_codedx` script, providing the path to the `.war` and platform files:

+
----
/opt/swamp/bin/install_codedx <.war file> <.qcow2.gz file>
----

+
When prompted, provide the password for the database's `root` user, which is
needed to add the Code Dx viewer to the database and make it available in
the SWAMP.

5. (Optional) In order to conserve disk space, delete the Code Dx `.war`
   file and platform files that you downloaded and copied to the
   SWAMP-in-a-Box host.

If you have previously installed an older version of Code Dx and wish to
replace it with a newer version, follow the above procedure using the newer
Code Dx `.war` file and the viewer platform corresponding to the newer version
of Code Dx. The `install_codedx` script will replace the older version of 
Code Dx with the newer one.
