Installing Additional Components
--------------------------------


[[add-on-platforms]]
Installing Additional Platforms
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The SWAMP-in-a-Box installer includes and installs only the Ubuntu 16.04
platform for performing assessments. For most package types, this is the
only supported platform. For C/C++ packages, additional platforms are
available, including releases of CentOS, Debian, Fedora, Scientific Linux,
and older releases of Ubuntu.


==== Before You Begin ====

* You will need `root` access to the SWAMP-in-a-Box host.
* You will need `root` access to the SWAMP-in-a-Box database.


==== Procedure ====

1. Visit https://platform.swampinabox.org/platform-images/.

2. Download and copy to the SWAMP-in-a-Box host the `.qcow2.gz` files
corresponding to the additional platforms you wish to perform assessments
on. The naming scheme for these files is as follows:

+
----
condor-<Linux distribution>-<version>-<32 or 64 bit>-master-<YYYYMMDD>.qcow2.gz
----

+
When downloading the files, name the copies exactly as shown on
https://platform.swampinabox.org/platform-images/[platform.swampinabox.org].
Otherwise, they will not be recognized as supported platforms in the next
step.

3. On the SWAMP-in-a-Box host, for each file, as `root` (or using `sudo`),
run the `install_platform` script, providing the path to the `.qcow2.gz`
file:

+
----
/opt/swamp/bin/install_platform <path to .qcow2.gz file>
----

+
When prompted, provide the password for the database's `root` user, which is
needed to add the platform to the database and make it available in the
SWAMP. Note that `install_platform` will likely take several minutes to
complete due to the size of the file.


Enabling Android Assessments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can enable SWAMP-in-a-Box to assess Android Java Source and Android .APK
packages.


==== Before You Begin ====

* You will need `root` access to the SWAMP-in-a-Box host.
* You will need `root` access to the SWAMP-in-a-Box database.
* You will need to make sure you have enough available hard drive space on
your SWAMP-in-a-Box host to download and decompress the Android Ubuntu
platform image.

[NOTE]
The Android Ubuntu platform includes the OS dependencies needed to build and
assess Android Packages. As such it is quite large. The downloadable .qcow2.gz
file needed to add the platform is over 28 GB. The decompressed, installed
.qcow2 file takes up about 175 GB in the /swamp/platforms/images directory.


==== Procedure ====

1. Download and install the Android Ubuntu 12.04 64-bit platform following
the procedure for <<add-on-platforms>>.

2. Optionally delete the Android Ubuntu platform .qcow2.gz file if you wish to
conserve disk space.

When the Android Ubuntu platform is added, the Android Java Source and
Android .APK package types are enabled. Android-specific tools are installed
with SWAMP-in-a-Box, but they cannot be used for assessments until the
Android Ubuntu platform is added.


Installing Additional Tools
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The SWAMP-in-a-Box installer includes and installs a variety of tools for
assessing packages.

For C/C++ packages, three additional tools can be installed:

  * <<about-codesonar,CodeSonar>>, and
  * <<about-parasoft,Parasoft C/C++test>>.

For Java packages, two additional tools can be installed:

  * https://www.owasp.org/index.php/OWASP_Dependency_Check[OWASP Dependency Check] and
  * <<about-parasoft,Parasoft Jtest>>.

For Web Scripting packages, one additional tool can be installed:

  * A version of https://retirejs.github.io/[Retire.js] that does not
    require internet access (the version included with SWAMP-in-a-Box will
    not function correctly without internet access)

The process for obtaining tool installers/archives from their vendors and
packaging them into the format that the SWAMP requires differs
_significantly_ between the tools. However, once that is done, the process
for installing and configuring the tools for use in the SWAMP is largely
similar.


==== Before You Begin ====

* You will need `root` access to the SWAMP-in-a-Box host.
* You will need `root` access to the SWAMP-in-a-Box database.


==== Obtain the Tool Installer/Archive from Its Vendor ====

CodeSonar::
Parasoft C/C++test::
Parasoft Jtest::

Refer to the <<obtaining-add-ons,appendix on obtaining add ons>> for
information on how to contact each tool's vendor. Obtain one or both of the
32-bit and 64-bit Linux archives for the tool you wish to install. For
Parasoft C/C++test and Parasoft Jtest, only versions 10.3.0 and later are
supported.

+
In addition, follow the vendor's instructions on setting up a license
server. Ensure that the SWAMP-in-a-Box host is able to contact the license
server on the required ports.

+
The archives for CodeSonar should be named:

+
----
codesonar-<version>.<YYYYMMDD>-i686-pc-linux.tar.gz    (32-bit)
codesonar-<version>.<YYYYMMDD>-x86_64-pc-linux.tar.gz  (64-bit)
----

+
The archives for Parasoft C/C++test should be named:

+
----
parasoft_cpptest_engine_<version>_linux.tar.gz         (32-bit)
parasoft_cpptest_engine_<version>_linux_x86_64.tar.gz  (64-bit)
----

+
The archives for Parasoft Jtest should be named:

+
----
parasoft_jtest_<version>_linux_x86.tar.gz     (32-bit)
parasoft_jtest_<version>_linux_x86_64.tar.gz  (64-bit)
----

OWASP Dependency Check::

Visit https://platform.swampinabox.org/tool-archives/ and download the
`dependency-check-<version>.tar.gz` file corresponding to the version of
OWASP Dependency Check that you would like to install. The archive from
https://platform.swampinabox.org/tool-archives/[platform.swampinabox.org]
includes scripts and documentation for integrating the tool into the SWAMP.

Retire.js::

On the SWAMP-in-a-Box host, copy the
`/swamp/store/SCATools/retire-js-<version>.tar.gz` file corresponding to the
version of Retire.js that you would like to install to some directory that
you have write access to (for example, your home directory).


[[add-on-tool-create-archive]]
==== Create the SWAMP Tool Archive ====

CodeSonar::
Parasoft C/C++test::
Parasoft Jtest::

Run the `make_swamp_tool` script to package the vendor's installers into the
archive format that the SWAMP uses.

+
----
/opt/swamp/bin/make_swamp_tool \
    --tool-name <gt-csonar or ps-ctest or ps-jtest> \
    --tool-version <version> \
    --installer-linux32 <path to 32-bit archive> \
    --installer-linux64 <path to 64-bit archive>
----

+
Specify `gt-csonar`, `ps-ctest`, or `ps-jtest` for the `--tool-name` option,
depending on the tool being packaged. Omit the `--installer-linux32` option
if you have only the 64-bit installer, and similarly for the
`--installer-linux64` option.

+
When `make_swamp_tool` completes, the output should include the path to the
SWAMP tool archive file that was created. Note that `make_swamp_tool` will
likely take several minutes to complete due to the size of the installers.

OWASP Dependency Check::
Retire.js::

Expand the archive file that you downloaded or copied:

+
----
tar zxvf <tool-name-and-version>.tar.gz
----

+
This should create a directory `<tool-name-and-version>`. Inside the
directory will be `README` files in various formats. Follow the directions
in the `README` for creating the SWAMP tool archive. Make note of whether
you will need to <<add-on-tool-configure,add additional entries to
`services.conf`>> or <<configure-internetless,configure assessments to run
without internet access>> (i.e., "internet-inaccessible" assessments).


==== Install the Tool ====

The `install_tool` script is used to install and manage any tools that are
added onto a SWAMP-in-a-Box installation. The script must always be invoked
with the following command line arguments:

* `--tool <id>`: This specifies the tool being managed. Recognized values
  for `<id>` include:

  ** `dependency-check`: OWASP Dependency Check
  ** `gt-csonar`: GrammaTech CodeSonar
  ** `ps-ctest`: Parasoft C/C++test
  ** `ps-jtest`: Parasoft Jtest
  ** `retire-js`: Retire.js

* `--add`, `--configure`, `--remove`, or `--replace`: This determines the
  "mode" that the script will run in, i.e., whether to add a new version of
  the tool, remove an existing version of the tool, replace an existing
  version of the tool, or configure the tool. Depending on the mode
  selected, other command line arguments will be required.

To add a new version of a tool to the swamp, as `root` (or using `sudo`),
run `install_tool` as follows:

----
/opt/swamp/bin/install_tool \
    --tool <id> \
    --add \
    --tool-version <version> \
    --tool-archive <path to the SWAMP tool archive file>
----

For some tools, notably Parasoft C/C++test and Parasoft Jtest, you might
need to pass a different version string to `install_tool` than the one for
`make_swamp_tool` in order to match the filename produced by
`make_swamp_tool`. For example, compared to the version string for
`make_swamp_tool`, you might need to append `-2` or `-12`.

Note that `install_tool` will likely take several minutes to complete due to
the size of the tool archive.


[[add-on-tool-configure]]
==== Configure the Tool ====

As `root` (or using `sudo`), run the `install_tool` script with the
`--configure` option, providing additional options as needed.

CodeSonar::
Parasoft C/C++test::
Parasoft Jtest::

Use the `--license-server-host` and `--license-server-port` options to
specify the hostname of the license server to use and the port on which to
contact the license server:

+
----
/opt/swamp/bin/install_tool \
    --tool <id> \
    --configure \
    --license-server-host <hostname of the license server> \
    --license-server-port <port number>
----

+
For Parasoft C/C++test and Parasoft Jtest, the script will prompt for the
username and password to use for contacting the license server.

+
In addition, use the `--limit` option to specify how many simultaneous
instances of the tool the SWAMP may run:

+
----
/opt/swamp/bin/install_tool \
    --tool <id> \
    --configure \
    --limit <max number of simultaneous instances>
----

OWASP Dependency Check::

Use the `--tool-conf` option to specify the path to a file containing
additional entries that should be added to `services.conf`:

+
----
/opt/swamp/bin/install_tool \
    --tool <id> \
    --configure \
    --tool-conf <path to file containing entries for services.conf>
----


==== Manage the Installed Versions of the Tool ====

* Additional versions of each tool can be installed using the directions
  above. In the SWAMP web application, the "latest" version of the tool will
  be whichever version was *installed* most recently. We recommend
  installing multiple versions in order (e.g., 1.0, 2.0, 2.1, 3.0, etc.) so
  that the "latest" version matches users' expectations.

* If you wish to remove a version of a tool from the SWAMP, as `root` (or
  using `sudo`), run the `install_tool` script with the `--remove` option,
  providing the version to remove:

+
----
/opt/swamp/bin/install_tool \
    --tool <id> \
    --remove \
    --tool-version <version>
----

* If you have previously installed, say, only the 32-bit version of a tool
  and now wish to make both the 32-bit and 64-bit versions available, first
  <<add-on-tool-create-archive,create the SWAMP tool archive>>, as above, to
  package the 32-bit and 64-bit archives together for the SWAMP. Then as
  `root` (or using `sudo`), run the `install_tool` script with the
  `--replace` option:

+
----
/opt/swamp/bin/install_tool \
    --tool <id> \
    --replace \
    --tool-version <version> \
    --tool-archive <path to SWAMP tool archive file>
----


[[add-on-viewers]]
Installing Additional Viewers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The SWAMP-in-a-Box installer includes and installs only a "native" viewer
for viewing the results of an assessment. The SWAMP web application also
provides a link to download the raw results of an assessment as a SCARF XML
file.

For users with needs that are not met by either of these options, it is
possible to install a SWAMP-specific version of Code Dx for viewing results.
Refer to the <<about-code-dx,appendix on Code Dx>> for information about
obtaining this SWAMP-specific version of Code Dx from Code Dx, Inc.
(SWAMP-in-a-Box currently does *not* support integrating with an existing,
standalone Code Dx installation.)


==== Before You Begin ====

* You will need `root` access to the SWAMP-in-a-Box host.

* You will need `root` access to the SWAMP-in-a-Box database.

* You will need to obtain the `.war` file for the SWAMP-specific version of
  Code Dx from Code Dx, Inc. If you are provided with a `.zip` file or some
  other archive format, first expand the archive and locate the `.war` file
  within the expanded contents.


==== Procedure ====

1. Copy the Code Dx `.war` file obtained from Code Dx, Inc. to the
SWAMP-in-a-Box host.

2. On the SWAMP-in-a-Box host, as `root` (or using `sudo`), run the
`install_codedx` script, providing the path to the `.war` file:

+
----
/opt/swamp/bin/install_codedx <path to Code Dx .war file>
----

+
When prompted, provide the password for the database's `root` user, which is
needed to add the Code Dx viewer to the database and make it available in
the SWAMP.
