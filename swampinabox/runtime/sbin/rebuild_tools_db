#!/bin/bash

# This file is subject to the terms and conditions defined in
# 'LICENSE.txt', which is part of this source code distribution.
#
# Copyright 2012-2019 Software Assurance Marketplace

#
# Rebuild the 'tools' database.
#

encountered_error=0
trap 'encountered_error=1; echo "Error (unexpected): In $(basename "$0"): $BASH_COMMAND" 1>&2' ERR
set -o errtrace

if [ "$(whoami)" != "root" ]; then
    echo "Error: This utility must be run as 'root'. Perhaps use 'sudo'." 1>&2
    exit 1
fi

############################################################################

BINDIR=$(dirname "$0")
swamp_context=$1

sql_temp=$(mktemp /tmp/rebuild_tools_db.XXXXXXXX)

source "$BINDIR/db_support.functions"
trap 'stty echo ; reset_db_support ; rm -f "$sql_temp"' EXIT
trap 'stty echo ; reset_db_support ; rm -f "$sql_temp" ; exit 1' INT TERM

setup_db_support

############################################################################

function is_mir_swamp_like_context() {
    [ "$swamp_context" = "-singleserver" ] || [ "$swamp_context" = "-mir-swamp" ]
}

if is_mir_swamp_like_context ; then
    inventory_file_list=(tools-bundled.txt tools-metric.txt tools-MIR.txt)
    tool_remove_all_script="/opt/swamp/sql/util/delete_all_tools.sql"
else
    inventory_file_list=(tools-bundled.txt tools-metric.txt)
    tool_remove_all_script="/opt/swamp/sql/util/delete_non_user_tools.sql"
fi

############################################################################

echo "Resetting the tools database by removing existing bundled tools"
do_mysql_command "$tool_remove_all_script"

############################################################################

echo "Adding bundled tools for the current release to the database"
for inventory_file in "${inventory_file_list[@]}" ; do
    while read -r tool_archive ; do
        tool_id=$(echo "$tool_archive" | sed -E -e 's/.gz$//' -e 's/.tar$//')
        params_sql="/opt/swamp/sql/tools/$tool_id.sql"
        install_sql="/opt/swamp/sql/util/tool_install.sql"

        echo "Adding: $tool_id"
        do_mysql_command "$params_sql" "$install_sql"
    done < "/opt/swamp/etc/$inventory_file"
done
echo "Finished adding tools to the database"

############################################################################

echo "Adding tool compatibility information to the database"
echo "Adding: (bundled tools)"
do_mysql_command "/opt/swamp/sql/populate_tool_metadata.sql"

if ! is_mir_swamp_like_context ; then
    for tool_meta_sql in /opt/swamp/sql/tools_add_on/*.meta.sql ; do
        tool_id=$(basename "$tool_meta_sql" .meta.sql)
        params_sql="/opt/swamp/sql/tools_add_on/$tool_id.sql"

        echo "select tool_version_uuid from tool_shed.tool_version where tool_uuid = @tool_uuid;" > "$sql_temp"
        tool_version_uuids=$(do_mysql_command "$params_sql" "$sql_temp")

        if [ ! -z "$tool_version_uuids" ]; then
            while read -r tool_version_uuid ; do
                escaped_tool_version_uuid=$tool_version_uuid
                escaped_tool_version_uuid=${escaped_tool_version_uuid//\'/\'\'/}
                escaped_tool_version_uuid=${escaped_tool_version_uuid//\\/\\\\/}

                echo "Adding: $tool_id ($tool_version_uuid)"
                echo "set @tool_version_uuid = '$escaped_tool_version_uuid';" > "$sql_temp"
                do_mysql_command "$params_sql" "$sql_temp" "$tool_meta_sql"
            done <<< "$tool_version_uuids"
        fi
    done
fi

echo "Finished adding tool compatibility information to the database"

############################################################################

if [ $encountered_error -eq 0 ]; then
    echo "Finished rebuilding the tools database"
else
    echo "Error: Finished rebuilding the tools database, but with errors" 1>&2
fi

reset_db_support
exit $encountered_error
