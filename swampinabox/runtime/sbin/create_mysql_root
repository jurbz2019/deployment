#!/bin/bash
set +o pipefail

# This file is subject to the terms and conditions defined in
# 'LICENSE.txt', which is part of this source code distribution.
#
# Copyright 2012-2019 Software Assurance Marketplace

#
# Prompt for a password, encrypt it, and save the result into a file.
#

encountered_error=0
trap 'encountered_error=1 ; echo "Error (unexpected): $BASH_COMMAND" 1>&2' ERR
set -o errtrace

unset CDPATH
BINDIR=$(cd -- "$(dirname -- "$0")" && pwd)

############################################################################

password_file=$1

if [ -z "$password_file" ]; then
    echo "Usage: $0 <password file> [options]" 1>&2
    exit 1
fi

############################################################################

db_user="root"
prompt="Enter the password for the database's 'root' user: "

need_retype=""
need_db_test=""
need_php_bcrypt=""

for option in "${@:2}" ; do
    case "$option" in
        --user=*)      db_user=${option#--user=} ;;
        --prompt=*)    prompt=${option#--prompt=} ;;

        --confirm)     need_retype=yes ;;
        --test)        need_db_test=yes ;;
        --php-bcrypt)  need_php_bcrypt=yes ;;
    esac
done

############################################################################

tmp_cnf_file=""
tmp_password_file=""

do_cleanup() {
    rm -f "$tmp_cnf_file" \
          "$tmp_password_file"
    stty echo 1>/dev/null 2>&1 || :
}
trap 'do_cleanup' EXIT

############################################################################

ask_for_password() {
    local need_password=1
    while [ $need_password -eq 1 ]; do
        printf '%s' "$prompt"
        read -r -s DB_PASSWORD
        printf '\n'

        if [ -z "$DB_PASSWORD" ]; then
            echo "*** Password cannot be empty. ***" 1>&2
        else
            if [ "$need_retype" = "yes" ]; then
                printf 'Retype password: '
                read -r -s CONFIRMATION
                printf '\n'

                if [ "$DB_PASSWORD" != "$CONFIRMATION" ]; then
                    echo "*** Passwords do not match. ***" 1>&2
                else
                    need_password=0
                fi
            else
                need_password=0
            fi
        fi
    done
}

save_password() {
    local destination=$1
    local password=$DB_PASSWORD

    if [ "$need_php_bcrypt" = "yes" ]; then
        password=${password//\\/\\\\}
        password=${password//\'/\\\'}
        password=$(php -r "echo password_hash('$password', PASSWORD_BCRYPT);")
        password="{BCRYPT}$password"
    fi

    umask 0077
    touch "$destination"
    chmod u=rw,og="" "$destination"
    printf '%s\n' "$password" \
        | openssl enc -aes-256-cbc -salt -out "$destination" -pass pass:swamp
    chmod u=r,og="" "$destination"
}

test_password() {
    local test_failed=0

    tmp_cnf_file=$(mktemp create_mysql_root.XXXXXXXX)
    tmp_password_file=$(mktemp create_mysql_root.XXXXXXXX)

    save_password "$tmp_password_file"

    "$BINDIR"/create_mysql_root_cnf \
        "$tmp_cnf_file" \
        --user="$db_user" \
        --password-file="$tmp_password_file"

    if ! echo ";" | mysql --defaults-file="$tmp_cnf_file"
    then
        test_failed=1
        echo "*** Failed to log into the database as '$db_user'. ***" 1>&2
    fi

    do_cleanup
    return $test_failed
}

############################################################################

ask_for_password

if [ "$need_db_test" = "yes" ]; then
    while ! test_password ; do
        ask_for_password
    done
fi

save_password "$password_file"
exit $encountered_error
