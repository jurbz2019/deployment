#!/bin/bash

# This file is subject to the terms and conditions defined in
# 'LICENSE.txt', which is part of this source code distribution.
#
# Copyright 2012-2019 Software Assurance Marketplace

#
# Install a VM disk image as a new platform for assessments.
#

encountered_error=0
trap 'encountered_error=1; echo "Error (unexpected): In $(basename "$0"): $BASH_COMMAND" 1>&2' ERR
set -o errtrace

##########################################################################

platforms_image_store="/swamp/platforms/images"
platforms_script_store="/opt/swamp/sql/platforms"

BINDIR=$(dirname "$0")
vm_image_src=$1
vm_image_dest="$platforms_image_store/$(basename "$vm_image_src")"
vm_image_dest="${vm_image_dest%%.gz}"

##########################################################################

if [ -z "$vm_image_src" ]; then
    echo "Usage: $0 <VM platform .qcow2 or .qcow2.gz file>" 1>&2
    exit 1
fi
if [ ! -r "$vm_image_src" ]; then
    echo "Error: File is not readable: $vm_image_src" 1>&2
    exit 1
fi
if [[ ! ( "$vm_image_src" =~ \.qcow2$ ) && ! ( "$vm_image_src" =~ \.qcow2\.gz$ ) ]]; then
    echo "Error: Not a '.qcow2' or 'qcow2.gz' file: $vm_image_src" 1>&2
    exit 1
fi

platform_install_sql=""
for platform_sql in "$platforms_script_store"/*.sql ; do
    platform=$(basename "$platform_sql" .sql)
    platform=${platform/\.minorversion/}

    if [[ $platform =~ (.*)(-32|-64) ]]; then
        distribution=${BASH_REMATCH[1]}
        bits=${BASH_REMATCH[2]}

        if [[ $(basename "$vm_image_src") =~ ^"condor-$distribution".*"$bits-master".*".qcow2" ]]; then
            platform_install_sql="$platform_sql"
            break
        fi
    fi
done

if [ -z "$platform_install_sql" ]; then
    echo "Error: Not a recognized installable platform: $vm_image_src" 1>&2
    exit 1
fi
if [ "$(whoami)" != "root" ]; then
    echo "Error: This utility must be run as 'root'. Perhaps use 'sudo'." 1>&2
    exit 1
fi

source "$BINDIR/../sbin/db_support.functions"
trap 'stty echo ; reset_db_support' EXIT
trap 'stty echo ; reset_db_support ; exit 1' INT TERM

##########################################################################

#
# Prompt early for the database root password, so that the user can
# wander off while the .qcow2 file is installed on the file system.
#
setup_db_support

#
# Install the .qcow2 file.
#
if [ "$vm_image_src" != "$vm_image_dest" ]; then
    if [[ "$vm_image_src" =~ .qcow2$ ]]; then
        echo "Copying '$(basename "$vm_image_src")' to '$(dirname "$vm_image_dest")'"
        cp "$vm_image_src" "$vm_image_dest"
    elif [[ "$vm_image_src" =~ .gz$ ]]; then
        echo "Unzipping '$(basename "$vm_image_src")' into '$(dirname "$vm_image_dest")'"
        gunzip -c "$vm_image_src" > "$vm_image_dest"
    fi
fi
chown root:root "$vm_image_dest"
chmod 644       "$vm_image_dest"

#
# Update the database.
#
echo "Updating database records"
do_mysql_command "$platform_install_sql"

##########################################################################

reset_db_support

if [ $encountered_error -eq 0 ]; then
    echo "Finished installing platform"
else
    echo "Error: Finished installing platform, but with errors"
fi
exit $encountered_error
