#!/bin/bash
#
# This file is subject to the terms and conditions defined in
# 'LICENSE.txt', which is part of this source code distribution.
#
# Copyright 2012-2020 Software Assurance Marketplace


is_color_ok()
{
  [ -t 1 ] || [ -n "${SWAMP_USE_COLOR:-}" ]
}


is_command()
{
  command -v "$1" >/dev/null 2>&1
}


is_readable_file()
{
  [ -r "$1" ] && [ -f "$1" ]
}


printctrl()
{
  if is_color_ok && is_command tput; then
    tput "$@" 2>/dev/null ||:
  fi
}


log()
{
  if [ -n "${SWAMP_LOG_FD:-}" ] \
    && (printf "" >&"${SWAMP_LOG_FD}") 2>/dev/null
  then
    printf '%s\n' "[$(date +"%Y-%m-%d %H:%M:%S %z")] $*" >&"${SWAMP_LOG_FD}"
  fi
}


debug()
{
  log "[DEBUG] $*"
}


info()
{
  log "[INFO] $*"
  printf '%s\n' "$*"
}


warn()
{
  log "[WARN] $*"
  { printctrl bold
    printctrl setaf 1
    printf '%s' "Warning:"
    printctrl sgr0
    printf '%s\n' " $*"
  } >&2
}


error()
{
  log "[ERROR] $*"
  { printctrl bold
    printctrl setaf 1
    printf '%s' "Error:"
    printctrl sgr0
    printf '%s\n' " $*"
  } >&2
}


get_os_distribution()
{
  if [ -r /etc/centos-release ]; then
    printf 'CentOS Linux'
    return 0
  fi
  if [ -r /etc/redhat-release ]; then
    printf 'Red Hat Linux'
    return 0
  fi
  printf 'Unknown'
  return 1
}


get_os_version()
{
  if [ -r /etc/centos-release ]; then
    awk '{ print substr($0, match($0, /[[:digit:]]+/), RLENGTH) ; }' \
        /etc/centos-release
    return 0
  fi
  if [ -r /etc/redhat-release ]; then
    awk '{ print substr($0, match($0, /[[:digit:]]+/), RLENGTH) ; }' \
        /etc/redhat-release
    return 0
  fi
  printf 'Unknown'
  return 1
}


yum_install()
{
  info "Installing packages: $*"
  yum -y install "$@"
}


yum_remove()
{
  info "Removing packages: $*"
  yum -y remove "$@"
}


yum_confirm()
{
  local capability
  for capability in "$@"; do
    if ! rpm --query --whatprovides --quiet "${capability}"; then
      error "No package provides: ${capability}"
      return 1
    fi
  done
}


get_rpm_version()
{
  local capability=$1
  if rpm --query --whatprovides --quiet "${capability}"; then
    rpm --query --queryformat '%{VERSION}-%{RELEASE}' "${capability}"
  fi
}


tell_service()
{
  local root_dir
  root_dir="$(builtin cd -P -- "$(dirname -- "${BASH_SOURCE}")"/.. && pwd)"

  "${root_dir}"/sbin/swamp_manage_service "$@"
}


disable_service()
{
  local svc=$1
  info "Disabling the '${svc}' system service"
  if command -v systemctl >/dev/null 2>&1; then
    systemctl disable "${svc}"
  else
    chkconfig "${svc}" off
  fi
}


enable_service()
{
  local svc=$1
  info "Enabling the '${svc}' system service"
  if command -v systemctl >/dev/null 2>&1; then
    systemctl enable "${svc}"
  else
    chkconfig "${svc}" on
  fi
}


create_user()
{
  local user=$1
  if [ -z "$(getent passwd "${user}")" ]; then
    info "Creating the '${user}' user"
    useradd "${user}"
  fi
}


create_group()
{
  local group=$1
  shift  # keep only the users to add in "$@"

  if ! groupmems -g "${group}" -l >/dev/null 2>&1; then
    info "Creating the '${group}' group"
    groupadd "${group}"
  fi

  local user
  for user in "$@"; do
    if ! groupmems -g "${group}" -l | grep -q "\\<${user}\\>"; then
      info "Adding '${user}' to the '${group}' group"
      groupmems -g "${group}" -a "${user}"
    fi
  done
}


is_command_available()
{
  local arg
  for arg in "$@"; do
    if ! command -v "${arg}" >/dev/null 2>&1; then
      error "'${arg}' is not in ${USER}'s \$PATH"
      return 1
    fi
  done
}


is_docker_available()
{
  command -v docker >/dev/null 2>&1
}


exit_if_not_root()
{
  if [ "$(whoami)" != "root" ]; then
    error "This utility must be run as 'root' (perhaps use 'sudo'?)"
    exit 1
  fi
}


#
# Use 'do_mysql_command' to run one or more SQL scripts.
#
# Use 'prep_db_service' to ensure that the SQL database service is running
# and that password files are present, which might require querying the user
# for passwords. Use 'unprep_db_service' to undo any changes that were made
# by 'prep_db_service'.
#
# The functions '{prep,unprep}_docker_service' are similar.
#
readonly mysql_command="mysql --defaults-file=/opt/swamp/sql/sql.cnf -B -N"
readonly mysqldump_command="mysqldump --defaults-file=/opt/swamp/sql/sql.cnf"

zz_rm_cnf=""
zz_rm_password=""
zz_stop_docker=""
zz_stop_mysql=""


run_sql_script()
{
  if [ $# -gt 0 ]; then
    local arg
    for arg in "$@"; do
      if [ ! -f "${arg}" ] || [ ! -r "${arg}" ]; then
        error "Not a readable file: ${arg}"
        return 1
      fi
    done

    debug "Running SQL scripts: $*"
    cat "$@" | ${mysql_command}
  fi
}


prep_db_service()
{
  exit_if_not_root

  local root_dir
  root_dir="$(builtin cd -P -- "$(dirname -- "${BASH_SOURCE}")"/.. && pwd)"

  if [ "$(tell_service mysql status)" = "stopped" ]; then
    zz_stop_mysql=yes
    tell_service mysql start
  fi
  if [ ! -e /etc/.mysql_root ] && [ ! -e /etc/.mysql ]; then
    zz_rm_password=yes
    "${root_dir}"/sbin/create_mysql_root /etc/.mysql_root --test
  fi
  if [ ! -e /opt/swamp/sql/sql.cnf ]; then
    zz_rm_cnf=yes
    "${root_dir}"/sbin/create_mysql_root_cnf /opt/swamp/sql/sql.cnf
  fi
}


unprep_db_service()
{
  if [ -n "${zz_stop_mysql}" ]; then
    tell_service mysql stop && zz_stop_mysql=""
  fi
  if [ -n "${zz_rm_password}" ]; then
    rm -f /etc/.mysql_root && zz_rm_password=""
  fi
  if [ -n "${zz_rm_cnf}" ]; then
    rm -f /opt/swamp/sql/sql.cnf && zz_rm_cnf=""
  fi
}


prep_docker_service()
{
  if ! is_docker_available; then
    return
  fi

  exit_if_not_root

  if [ "$(tell_service docker status)" = "stopped" ]; then
    zz_stop_docker=yes
    tell_service docker start
  fi
}


unprep_docker_service()
{
  if [ -n "${zz_stop_docker}" ]; then
    tell_service docker stop && zz_stop_docker=""
  fi
}


#
# Functions for backwards compatibility with older version of this library.
#

yum_erase() { yum_remove "$@" ; }
check_for_commands() { is_command_available "$@" ; }
setup_db_support() { prep_db_service "$@" ; }
reset_db_support() { unprep_db_service "$@" ; }
do_mysql_command() { run_sql_script "$@" ; }
